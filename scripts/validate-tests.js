
#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç Validando configuraci√≥n de tests...\n');

// 1. Verificar que Jest est√° configurado
console.log('1Ô∏è‚É£ Verificando configuraci√≥n de Jest...');
try {
  const jestConfig = path.join(process.cwd(), 'jest.config.js');
  if (fs.existsSync(jestConfig)) {
    console.log('‚úÖ jest.config.js encontrado');
  } else {
    console.log('‚ùå jest.config.js no encontrado');
    process.exit(1);
  }
} catch (error) {
  console.log('‚ùå Error verificando configuraci√≥n de Jest:', error.message);
  process.exit(1);
}

// 2. Verificar que los archivos de test existen
console.log('\n2Ô∏è‚É£ Verificando archivos de test...');
const testFiles = [
  'src/__tests__/components/ui/button.test.tsx',
  'src/__tests__/components/ticket/TicketForm.test.tsx',
  'src/__tests__/hooks/useAuth.test.tsx',
  'src/__tests__/lib/services/ticketService.test.ts',
  'src/__tests__/lib/data/customer/customerService.test.ts',
  'src/__tests__/mocks/supabase.ts',
  'src/setupTests.ts'
];

let missingFiles = [];
testFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file}`);
    missingFiles.push(file);
  }
});

if (missingFiles.length > 0) {
  console.log(`\n‚ùå ${missingFiles.length} archivos de test faltantes`);
  process.exit(1);
}

// 3. Verificar compilaci√≥n de TypeScript
console.log('\n3Ô∏è‚É£ Verificando compilaci√≥n de TypeScript...');
try {
  execSync('npx tsc --noEmit', { stdio: 'pipe' });
  console.log('‚úÖ TypeScript compila sin errores');
} catch (error) {
  console.log('‚ùå Errores de TypeScript encontrados:');
  console.log(error.stdout?.toString() || error.message);
  // No salimos aqu√≠ porque algunos errores de TS pueden ser por dependencias faltantes
}

// 4. Intentar ejecutar un test simple
console.log('\n4Ô∏è‚É£ Ejecutando test de validaci√≥n...');
try {
  execSync('npm test -- --testPathPattern=button.test.tsx --passWithNoTests', { stdio: 'inherit' });
  console.log('‚úÖ Test de validaci√≥n exitoso');
} catch (error) {
  console.log('‚ùå Error ejecutando tests');
  console.log('Esto es normal si faltan dependencias o hay errores de configuraci√≥n');
}

console.log('\n‚úÖ Validaci√≥n completada');
console.log('\nüìã Siguiente pasos:');
console.log('- Ejecutar: npm test para todos los tests');
console.log('- Ejecutar: npm run test:coverage para coverage');
console.log('- Ejecutar: node scripts/run-tests.js components para tests espec√≠ficos');
